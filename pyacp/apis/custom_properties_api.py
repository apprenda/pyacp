# coding: utf-8

"""
    Platform Operations Rest API

    The Platform Operations REST API can be leveraged to customize the Platform Operator experience of managing infrastructure and applications for the Apprenda Platform. This allows some of the functionality of the Platform's System Operations Center (SOC) to be accomplished through a variety of means such as custom-built UX or command-line interfaces.   For more information about the abilities of Platform Operators, see our documentation on the [SOC](/current/SOC).   ##Authentication   Before making a request, you must be authenticated. Learn how to [get authenticated](/restapi/platformops/v1/authentication).   ##Making a Request   ###Prerequisites   * Installed Platform of version 6.5.1 or later (Note that most endpoints are only available in version 6.7.0 and later)    * Authentication token   * If SOC authorization is enabled on your Platform, you must be assigned as an active Platform Operator   ###Request URL   All requests must use **https**.   The URL for every request you make is the Cloud URI of your Platform followed by \"/soc\" and the path structure of the endpoint. For example, if your Cloud URI is apps.apprenda.harp and you want to get the Add-ons for your Platform, the request URI will be **apps.apprenda.harp/soc/api/v1/addons**.   For more information, see our documentation on [using API resources](/restapi/platformops/v1/using-resources) and [finding your Cloud URI](/current/clouduri).   ###Request Headers   Your authenication token must be passed in the header of all requests using the key **ApprendaSessionToken** (not case sensitive).  

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CustomPropertiesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def add_custom_property(self, custom_property, **kwargs):
        """
        Add a new Custom Property
        **Requires Platform version 6.7.0 or later.**   Adds a new Custom Property to the Platform.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_custom_property(custom_property, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CustomProperty custom_property: Required. Custom Property to add (required)
        :return: CustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.add_custom_property_with_http_info(custom_property, **kwargs)
        else:
            (data) = self.add_custom_property_with_http_info(custom_property, **kwargs)
            return data

    def add_custom_property_with_http_info(self, custom_property, **kwargs):
        """
        Add a new Custom Property
        **Requires Platform version 6.7.0 or later.**   Adds a new Custom Property to the Platform.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.add_custom_property_with_http_info(custom_property, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CustomProperty custom_property: Required. Custom Property to add (required)
        :return: CustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['custom_property']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_custom_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'custom_property' is set
        if ('custom_property' not in params) or (params['custom_property'] is None):
            raise ValueError("Missing the required parameter `custom_property` when calling `add_custom_property`")


        collection_formats = {}

        resource_path = '/api/v1/customproperties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_property' in params:
            body_params = params['custom_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomProperty',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def custom_properties_get_public(self, **kwargs):
        """
        Get all Custom Properties
        **Requires Platform version 6.7.0 or later.**   Returns all Custom Properties available on the Platform.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_get_public(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] type: A comma-separated list of applicability options to filter on.
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :return: PagedResourceBaseCustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.custom_properties_get_public_with_http_info(**kwargs)
        else:
            (data) = self.custom_properties_get_public_with_http_info(**kwargs)
            return data

    def custom_properties_get_public_with_http_info(self, **kwargs):
        """
        Get all Custom Properties
        **Requires Platform version 6.7.0 or later.**   Returns all Custom Properties available on the Platform.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_get_public_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param list[str] type: A comma-separated list of applicability options to filter on.
        :param int page_size: Number of results to return in a single request. All results will be grouped into pages of this size. Default: 20
        :param int page_number: The page of results to return. Defaults to 1, the first page
        :return: PagedResourceBaseCustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'page_size', 'page_number']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_properties_get_public" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        resource_path = '/api/v1/customproperties'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'type' in params:
            query_params['type'] = params['type']
            collection_formats['type'] = 'multi'
        if 'page_size' in params:
            query_params['pageSize'] = params['page_size']
        if 'page_number' in params:
            query_params['pageNumber'] = params['page_number']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PagedResourceBaseCustomProperty',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def custom_properties_get_single_public(self, id, **kwargs):
        """
        Get Custom Property
        **Requires Platform version 6.7.0 or later.**   Returns a Custom Property.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_get_single_public(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Id of the Custom Property (required)
        :return: CustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.custom_properties_get_single_public_with_http_info(id, **kwargs)
        else:
            (data) = self.custom_properties_get_single_public_with_http_info(id, **kwargs)
            return data

    def custom_properties_get_single_public_with_http_info(self, id, **kwargs):
        """
        Get Custom Property
        **Requires Platform version 6.7.0 or later.**   Returns a Custom Property.   Learn more about [Custom Properties](/current/custom-properties). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_get_single_public_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Id of the Custom Property (required)
        :return: CustomProperty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_properties_get_single_public" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_properties_get_single_public`")


        collection_formats = {}

        resource_path = '/api/v1/customproperties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CustomProperty',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def custom_properties_remove(self, id, **kwargs):
        """
        Delete a Custom Property
        **Requires Platform version 6.7.0 or later.**   Deletes a Custom Property from the Platform. A Custom Property can't be deleted if it is referenced by any [Application Deployment Policy](/current/app-deployment-policies). Before deleting, make sure the Custom Property is not being referenced by an Application Deployment Policy.   Learn more about [managing Custom Properties](/current/custom-properties#managing). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_remove(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.custom_properties_remove_with_http_info(id, **kwargs)
        else:
            (data) = self.custom_properties_remove_with_http_info(id, **kwargs)
            return data

    def custom_properties_remove_with_http_info(self, id, **kwargs):
        """
        Delete a Custom Property
        **Requires Platform version 6.7.0 or later.**   Deletes a Custom Property from the Platform. A Custom Property can't be deleted if it is referenced by any [Application Deployment Policy](/current/app-deployment-policies). Before deleting, make sure the Custom Property is not being referenced by an Application Deployment Policy.   Learn more about [managing Custom Properties](/current/custom-properties#managing). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.custom_properties_remove_with_http_info(id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method custom_properties_remove" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `custom_properties_remove`")


        collection_formats = {}

        resource_path = '/api/v1/customproperties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_custom_property(self, id, custom_property, **kwargs):
        """
        Update a Custom Property
        **Requires Platform version 6.7.0 or later.**   Updates a Custom Property. If a Custom Property is referenced by an active [Application Deployment Policy](/current/app-deployment-policies), it can't be edited. Before making changes, you must set any referncing Application Deployment Policies to \"Inactive\" or remove the Custom Property from the policy all together.   Additionally, making a request to this endpoint will update all fields for a Custom Property. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.    Learn more about [managing Custom Properties](/current/custom-properties#managing). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_custom_property(id, custom_property, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Id of the Custom Property (required)
        :param CustomPropertyUpdate custom_property: Custom Property to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_custom_property_with_http_info(id, custom_property, **kwargs)
        else:
            (data) = self.update_custom_property_with_http_info(id, custom_property, **kwargs)
            return data

    def update_custom_property_with_http_info(self, id, custom_property, **kwargs):
        """
        Update a Custom Property
        **Requires Platform version 6.7.0 or later.**   Updates a Custom Property. If a Custom Property is referenced by an active [Application Deployment Policy](/current/app-deployment-policies), it can't be edited. Before making changes, you must set any referncing Application Deployment Policies to \"Inactive\" or remove the Custom Property from the policy all together.   Additionally, making a request to this endpoint will update all fields for a Custom Property. You should always pass all input values in the body of the request, because any value that is not provided will be updated to the default value.    Learn more about [managing Custom Properties](/current/custom-properties#managing). 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_custom_property_with_http_info(id, custom_property, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int id: Required. Id of the Custom Property (required)
        :param CustomPropertyUpdate custom_property: Custom Property to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'custom_property']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_property" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params) or (params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `update_custom_property`")
        # verify the required parameter 'custom_property' is set
        if ('custom_property' not in params) or (params['custom_property'] is None):
            raise ValueError("Missing the required parameter `custom_property` when calling `update_custom_property`")


        collection_formats = {}

        resource_path = '/api/v1/customproperties/{id}'.replace('{format}', 'json')
        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'custom_property' in params:
            body_params = params['custom_property']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json', 'text/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json', 'text/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api(resource_path, 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
